[
    {
        "id": "8abcfa4285a64e28",
        "type": "tab",
        "label": "Init",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a456f3115b876e96",
        "type": "tab",
        "label": "Register gateway",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "5cd67813776a9297",
        "type": "tab",
        "label": "Receive data",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1f7fe0dff64a8457",
        "type": "tab",
        "label": "Aggregate data",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e01a8318facb448e",
        "type": "tab",
        "label": "Send aggregated data",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "78d678c245e7c6f5",
        "type": "tab",
        "label": "Cleanup",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "36c212ac3767eebf",
        "type": "serial-port",
        "serialport": "/dev/tty.usbmodem1101",
        "serialbaud": "9600",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "\\n",
        "bin": "false",
        "out": "char",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "c628f8e8d8157672",
        "type": "sqlitedb",
        "db": "${NODERED_SQLITE_DB}",
        "mode": "RWC"
    },
    {
        "id": "e0eda3726175cf19",
        "type": "sqlite",
        "z": "8abcfa4285a64e28",
        "mydb": "c628f8e8d8157672",
        "sqlquery": "fixed",
        "sql": "create table if not exists data\n(\n    id          integer not null\n        constraint id\n            primary key autoincrement,\n    humidity    real    not null,\n    temperature real    not null,\n    date        TIMESTAMP,\n    sentAt        TIMESTAMP default null\n);\n\n",
        "name": "Create data table if not exists",
        "x": 500,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "c9fec765f0aa752d",
        "type": "inject",
        "z": "8abcfa4285a64e28",
        "name": "App started",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 120,
        "wires": [
            [
                "e0eda3726175cf19",
                "c5262e6969b8ad97"
            ]
        ]
    },
    {
        "id": "c5262e6969b8ad97",
        "type": "sqlite",
        "z": "8abcfa4285a64e28",
        "mydb": "c628f8e8d8157672",
        "sqlquery": "fixed",
        "sql": "",
        "name": "Create settings table if not exists",
        "x": 520,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "5c0e1257bcd81b94",
        "type": "catch",
        "z": "a456f3115b876e96",
        "name": "Gateway not authed",
        "scope": [
            "9e3a3facae4d9986"
        ],
        "uncaught": false,
        "x": 410,
        "y": 180,
        "wires": [
            [
                "805095ea76578cfc"
            ]
        ]
    },
    {
        "id": "b8de391e0098e3bc",
        "type": "debug",
        "z": "a456f3115b876e96",
        "name": "gateway registered",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "\"Gateway already registered\"",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 120,
        "wires": []
    },
    {
        "id": "417f06b5e08fac4a",
        "type": "http request",
        "z": "a456f3115b876e96",
        "name": "Verify gateway authed",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 660,
        "y": 120,
        "wires": [
            [
                "b8de391e0098e3bc"
            ]
        ]
    },
    {
        "id": "e7ebaf9d80abef60",
        "type": "http request",
        "z": "a456f3115b876e96",
        "name": "Register gateway",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 950,
        "y": 180,
        "wires": [
            [
                "8dde2e9c04d18ce1"
            ]
        ]
    },
    {
        "id": "8dde2e9c04d18ce1",
        "type": "change",
        "z": "a456f3115b876e96",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1200,
        "y": 180,
        "wires": [
            [
                "4026011227fd5951"
            ]
        ]
    },
    {
        "id": "c4b636062ea0a9b0",
        "type": "inject",
        "z": "a456f3115b876e96",
        "name": "Every 30 minutes",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1800",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "4026011227fd5951",
        "type": "sqlite",
        "z": "a456f3115b876e96",
        "mydb": "c628f8e8d8157672",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "Save authcode",
        "x": 1440,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "805095ea76578cfc",
        "type": "sqlite",
        "z": "a456f3115b876e96",
        "mydb": "c628f8e8d8157672",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "Read gateway info",
        "x": 650,
        "y": 180,
        "wires": [
            [
                "e7ebaf9d80abef60"
            ]
        ]
    },
    {
        "id": "9e3a3facae4d9986",
        "type": "sqlite",
        "z": "a456f3115b876e96",
        "mydb": "c628f8e8d8157672",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "Read authcode",
        "x": 400,
        "y": 120,
        "wires": [
            [
                "417f06b5e08fac4a"
            ]
        ]
    },
    {
        "id": "ed86ef97bebd5f05",
        "type": "serial in",
        "z": "5cd67813776a9297",
        "name": "Arduino",
        "serial": "36c212ac3767eebf",
        "x": 410,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "3bb7ef235c3a8e07",
        "type": "sqlite",
        "z": "5cd67813776a9297",
        "mydb": "c628f8e8d8157672",
        "sqlquery": "msg.topic",
        "sql": "INSERT INTO data (temperature, humidity)\nVALUES (?, ?)",
        "name": "Insert data",
        "x": 1050,
        "y": 300,
        "wires": [
            [
                "f7a84e6bd0a4370c"
            ]
        ]
    },
    {
        "id": "8ff8f12f8e55538a",
        "type": "function",
        "z": "5cd67813776a9297",
        "name": "Prepare statement",
        "func": "var prev = msg\nmsg = {}\nmsg.topic = `INSERT INTO data (temperature, humidity, date) VALUES ($temp, $humid, $date)`\nmsg.payload = [prev.payload.temp, prev.payload.hum, new Date().toISOString()]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 300,
        "wires": [
            [
                "3bb7ef235c3a8e07"
            ]
        ]
    },
    {
        "id": "e7c59655dcdf1f86",
        "type": "json",
        "z": "5cd67813776a9297",
        "name": "Parse json",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 610,
        "y": 300,
        "wires": [
            [
                "8ff8f12f8e55538a"
            ]
        ]
    },
    {
        "id": "115e425a0919973d",
        "type": "inject",
        "z": "5cd67813776a9297",
        "name": "Every 2 minutes",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "120",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 360,
        "wires": [
            [
                "2229a4de2e7944da"
            ]
        ]
    },
    {
        "id": "2229a4de2e7944da",
        "type": "function",
        "z": "5cd67813776a9297",
        "name": "Generate mock data",
        "func": "const temp = (Math.random() * 60) - 30;\nconst hum = (Math.random() * 80);\nreturn {payload: JSON.stringify({temp, hum})};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 360,
        "wires": [
            [
                "e7c59655dcdf1f86"
            ]
        ]
    },
    {
        "id": "f7a84e6bd0a4370c",
        "type": "debug",
        "z": "5cd67813776a9297",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "\"inserted new data at \" & $moment()\t",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 220,
        "wires": []
    },
    {
        "id": "9313ff5e0af04abf",
        "type": "comment",
        "z": "5cd67813776a9297",
        "name": "Use arduino node instead when possible",
        "info": "When arduino is connected, \nuse the Arduino node instead of generating mock data",
        "x": 340,
        "y": 200,
        "wires": []
    },
    {
        "id": "14c81525869cc432",
        "type": "inject",
        "z": "1f7fe0dff64a8457",
        "name": "Every 10s",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 100,
        "y": 60,
        "wires": [
            [
                "8131780a860ec0f7"
            ]
        ]
    },
    {
        "id": "affde963e2980197",
        "type": "function",
        "z": "1f7fe0dff64a8457",
        "name": "Aggretate",
        "func": "const min_date = msg.payload.reduce(({ date: min }, { date }) => {\n    return min < date ? min : date;\n})\n\nconst length = msg.payload.length;\n\nconst sum_temp = msg.payload.reduce((acc, d) => acc + d.temperature, 0);\nconst avg_temp = sum_temp/ length;\n\nconst sum_hum = msg.payload.reduce((acc, d) => acc + d.humidity, 0);\nconst avg_hum = sum_hum / length;\n\nreturn {topic: 'grouped_data', payload: {avg_hum, avg_temp, min_date}};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 340,
        "wires": [
            [
                "4e56a7c5ba6fbca8"
            ]
        ]
    },
    {
        "id": "8131780a860ec0f7",
        "type": "sqlite",
        "z": "1f7fe0dff64a8457",
        "mydb": "c628f8e8d8157672",
        "sqlquery": "fixed",
        "sql": "SELECT *\nFROM data\nWHERE sentAt IS NULL\nAND (unixepoch('now') - unixepoch(date)) >= 120\n  AND (\n    (unixepoch(date) - (SELECT unixepoch(MIN(date))\n                           FROM data\n                           WHERE sentAt IS NULL)\n                           ) / 60) <= 2",
        "name": "Fetch 2 minutes of data since first not aggregated data, only want",
        "x": 340,
        "y": 140,
        "wires": [
            [
                "31e7efd9b45a34eb"
            ]
        ]
    },
    {
        "id": "31e7efd9b45a34eb",
        "type": "switch",
        "z": "1f7fe0dff64a8457",
        "name": "Take if not empty",
        "property": "$count(payload)",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 490,
        "y": 220,
        "wires": [
            [
                "b19779d3356f3809"
            ],
            [
                "d523750caf0f2c9e"
            ]
        ]
    },
    {
        "id": "b19779d3356f3809",
        "type": "function",
        "z": "1f7fe0dff64a8457",
        "name": "Use message",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 340,
        "wires": [
            [
                "affde963e2980197",
                "d3685399ba90386b"
            ]
        ]
    },
    {
        "id": "d523750caf0f2c9e",
        "type": "debug",
        "z": "1f7fe0dff64a8457",
        "name": "Debug no data",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "\"ignoring empty data\"",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 200,
        "wires": []
    },
    {
        "id": "d3685399ba90386b",
        "type": "function",
        "z": "1f7fe0dff64a8457",
        "name": "Keep raw data",
        "func": "return {topic: 'rawData', payload: msg.payload}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 400,
        "wires": [
            [
                "394bf3cb66669c20"
            ]
        ]
    },
    {
        "id": "394bf3cb66669c20",
        "type": "join",
        "z": "1f7fe0dff64a8457",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1450,
        "y": 400,
        "wires": [
            [
                "e07acc2fa9a81b65"
            ]
        ]
    },
    {
        "id": "4e56a7c5ba6fbca8",
        "type": "sqlite",
        "z": "1f7fe0dff64a8457",
        "mydb": "c628f8e8d8157672",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "Save aggregated data",
        "x": 1200,
        "y": 340,
        "wires": [
            [
                "394bf3cb66669c20"
            ]
        ]
    },
    {
        "id": "e07acc2fa9a81b65",
        "type": "sqlite",
        "z": "1f7fe0dff64a8457",
        "mydb": "c628f8e8d8157672",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "Mark data as aggregated",
        "x": 1730,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "1b96ac2df139d54c",
        "type": "sqlite",
        "z": "e01a8318facb448e",
        "mydb": "c628f8e8d8157672",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "Read aggregated data",
        "x": 340,
        "y": 180,
        "wires": [
            [
                "1b3df56e02ae00f5"
            ]
        ]
    },
    {
        "id": "e820de3e4f6f9668",
        "type": "debug",
        "z": "e01a8318facb448e",
        "name": "Debug no data",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "\"ignoring empty data\"",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 180,
        "wires": []
    },
    {
        "id": "1b3df56e02ae00f5",
        "type": "switch",
        "z": "e01a8318facb448e",
        "name": "Take if not empty",
        "property": "$count(payload)",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 630,
        "y": 180,
        "wires": [
            [
                "33346f24098cc5e7"
            ],
            [
                "e820de3e4f6f9668"
            ]
        ]
    },
    {
        "id": "33346f24098cc5e7",
        "type": "function",
        "z": "e01a8318facb448e",
        "name": "Use message",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 280,
        "wires": [
            [
                "adcad3466c8f421b"
            ]
        ]
    },
    {
        "id": "8f6737b052d96c69",
        "type": "inject",
        "z": "e01a8318facb448e",
        "name": "Every 30s",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "30",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 90,
        "y": 180,
        "wires": [
            [
                "1b96ac2df139d54c"
            ]
        ]
    },
    {
        "id": "adcad3466c8f421b",
        "type": "http request",
        "z": "e01a8318facb448e",
        "name": "Send data",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 930,
        "y": 280,
        "wires": [
            [
                "cc10b69c3f96ec46"
            ]
        ]
    },
    {
        "id": "cc10b69c3f96ec46",
        "type": "sqlite",
        "z": "e01a8318facb448e",
        "mydb": "c628f8e8d8157672",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "Mark data as sent",
        "x": 1150,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "ba81707626e4bec4",
        "type": "inject",
        "z": "78d678c245e7c6f5",
        "name": "Every 12 hours",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "43200",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 230,
        "y": 80,
        "wires": [
            [
                "435f1d661a26e23f"
            ]
        ]
    },
    {
        "id": "435f1d661a26e23f",
        "type": "sqlite",
        "z": "78d678c245e7c6f5",
        "mydb": "c628f8e8d8157672",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "Remove data sent at least 7 days ago",
        "x": 550,
        "y": 80,
        "wires": [
            []
        ]
    }
]
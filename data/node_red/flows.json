[
    {
        "id": "24bcb24c3775858e",
        "type": "tab",
        "label": "Dashboard",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "8abcfa4285a64e28",
        "type": "tab",
        "label": "Init",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a456f3115b876e96",
        "type": "tab",
        "label": "Register gateway",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "5cd67813776a9297",
        "type": "tab",
        "label": "Receive data",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1f7fe0dff64a8457",
        "type": "tab",
        "label": "Aggregate data",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e01a8318facb448e",
        "type": "tab",
        "label": "Send aggregated data",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f1a2b92512d0677e",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "78d678c245e7c6f5",
        "type": "tab",
        "label": "Cleanup",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "36c212ac3767eebf",
        "type": "serial-port",
        "serialport": "/dev/tty.usbmodem1101",
        "serialbaud": "9600",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "\\n",
        "bin": "false",
        "out": "char",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "c628f8e8d8157672",
        "type": "sqlitedb",
        "db": "${NODERED_SQLITE_DB}",
        "mode": "RWC"
    },
    {
        "id": "4da2cc2d119258c0",
        "type": "ui_tab",
        "name": "Latest data",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "9e691eca550d8db3",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "dd77e61d13dc3b19",
        "type": "ui_group",
        "name": "Server communication",
        "tab": "a394b361312873e2",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "9845937855a560ce",
        "type": "ui_group",
        "name": "show",
        "tab": "4da2cc2d119258c0",
        "order": 2,
        "disp": false,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "a394b361312873e2",
        "type": "ui_tab",
        "name": "Server communication",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "67e5f8d1fd1d9533",
        "type": "ui_group",
        "name": "none",
        "tab": "4da2cc2d119258c0",
        "order": 3,
        "disp": false,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "fb1b03b9c0ea0a75",
        "type": "ui_group",
        "name": "Data in time",
        "tab": "4da2cc2d119258c0",
        "order": 3,
        "disp": false,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "c3ee981889995354",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "da8c1ee988299137",
        "type": "ui_gauge",
        "z": "24bcb24c3775858e",
        "name": "",
        "group": "9845937855a560ce",
        "order": 3,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Humidity",
        "label": "units",
        "format": "{{payload.humidity}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 1360,
        "y": 540,
        "wires": []
    },
    {
        "id": "375bcb2d46558ac8",
        "type": "ui_gauge",
        "z": "24bcb24c3775858e",
        "name": "",
        "group": "9845937855a560ce",
        "order": 2,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Temperature",
        "label": "Degrees",
        "format": "{{payload.temperature}}",
        "min": "-30",
        "max": "30",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 1370,
        "y": 580,
        "wires": []
    },
    {
        "id": "e8d4af1ce38befd5",
        "type": "sqlite",
        "z": "24bcb24c3775858e",
        "mydb": "c628f8e8d8157672",
        "sqlquery": "fixed",
        "sql": "SELECT ROUND(temperature, 1) temperature, ROUND(humidity,1) humidity, date FROM data\nORDER BY date DESC\nLIMIT 1",
        "name": "Get latest data",
        "x": 580,
        "y": 600,
        "wires": [
            [
                "83354551b1f1ea28",
                "87c9fcf7a87fb92f",
                "cf5add0296f2c165"
            ]
        ]
    },
    {
        "id": "83354551b1f1ea28",
        "type": "function",
        "z": "24bcb24c3775858e",
        "name": "Transform data",
        "func": "const payload = msg.payload[0];\nconst ui_control = payload ? {} : {\n    className: \"d-none\"\n};\nreturn {\n    ui_control,\n    payload: {...payload, date: new Date(payload.date).toLocaleString()}\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 600,
        "wires": [
            [
                "da8c1ee988299137",
                "375bcb2d46558ac8",
                "506dffd6c51745a4",
                "66726a028429cf1d"
            ]
        ]
    },
    {
        "id": "66726a028429cf1d",
        "type": "ui_text",
        "z": "24bcb24c3775858e",
        "group": "67e5f8d1fd1d9533",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "No latest data",
        "format": "No data recorded yet",
        "layout": "row-spread",
        "className": "",
        "x": 1380,
        "y": 640,
        "wires": []
    },
    {
        "id": "506dffd6c51745a4",
        "type": "ui_text",
        "z": "24bcb24c3775858e",
        "group": "9845937855a560ce",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Latest data received at",
        "format": "{{msg.payload.date}}",
        "layout": "col-center",
        "className": "",
        "x": 1400,
        "y": 500,
        "wires": []
    },
    {
        "id": "f105ceb239e1df28",
        "type": "sqlite",
        "z": "24bcb24c3775858e",
        "mydb": "c628f8e8d8157672",
        "sqlquery": "fixed",
        "sql": "SELECT MAX(sentAt) sentAt FROM aggregated_data ",
        "name": "Get last sent date",
        "x": 1110,
        "y": 1060,
        "wires": [
            [
                "90deb728ca88dc4e"
            ]
        ]
    },
    {
        "id": "87c9fcf7a87fb92f",
        "type": "function",
        "z": "24bcb24c3775858e",
        "name": "Configure group showing",
        "func": "const haveData = msg.payload.length > 0;\nconst show = [haveData ? \"Latest_data_show\" : \"Latest_data_none\"];\nconst hide = [haveData ? \"Latest_data_none\" : \"Latest_data_show\"];\nreturn {payload: {group: {hide, show}}};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 700,
        "wires": [
            [
                "4dc0fe66a23a83f1"
            ]
        ]
    },
    {
        "id": "4dc0fe66a23a83f1",
        "type": "ui_ui_control",
        "z": "24bcb24c3775858e",
        "name": "Show correct data group",
        "events": "all",
        "x": 1410,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "dffa6e7a48b405c5",
        "type": "sqlite",
        "z": "24bcb24c3775858e",
        "mydb": "c628f8e8d8157672",
        "sqlquery": "fixed",
        "sql": "SELECT COUNT() count FROM aggregated_data\nWHERE sentAt IS NULL",
        "name": "Get number of pending data to be sent",
        "x": 1180,
        "y": 940,
        "wires": [
            [
                "0653ae5b055fde84"
            ]
        ]
    },
    {
        "id": "ef66a611cf8be683",
        "type": "sqlite",
        "z": "24bcb24c3775858e",
        "mydb": "c628f8e8d8157672",
        "sqlquery": "fixed",
        "sql": "SELECT COUNT() count FROM aggregated_data\nWHERE sentAt IS NOT NULL",
        "name": "Get number of saved sent data",
        "x": 1150,
        "y": 1000,
        "wires": [
            [
                "d575331e2caa17ba"
            ]
        ]
    },
    {
        "id": "0f59dec39e922492",
        "type": "ui_text",
        "z": "24bcb24c3775858e",
        "group": "dd77e61d13dc3b19",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Last connection attempt",
        "format": "{{msg.payload.successful ? \"Successful\" : (\"Unsuccessful at \" + msg.payload.date)}}",
        "layout": "col-center",
        "className": "",
        "x": 870,
        "y": 1160,
        "wires": []
    },
    {
        "id": "e939a0446bb7b7e0",
        "type": "ui_text",
        "z": "24bcb24c3775858e",
        "group": "dd77e61d13dc3b19",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Last successful connection since start",
        "format": "{{msg.payload.date || \"Not yet\" }}",
        "layout": "col-center",
        "className": "",
        "x": 910,
        "y": 1120,
        "wires": []
    },
    {
        "id": "0653ae5b055fde84",
        "type": "ui_text",
        "z": "24bcb24c3775858e",
        "group": "9845937855a560ce",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Number of aggregated records waiting to be uploaded",
        "format": "{{msg.payload[0].count}}",
        "layout": "row-spread",
        "className": "",
        "x": 1640,
        "y": 940,
        "wires": []
    },
    {
        "id": "d575331e2caa17ba",
        "type": "ui_text",
        "z": "24bcb24c3775858e",
        "group": "9845937855a560ce",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Number of uploaded aggregated records stored on the gateway",
        "format": "{{msg.payload[0].count}}",
        "layout": "row-spread",
        "className": "",
        "x": 1670,
        "y": 1000,
        "wires": []
    },
    {
        "id": "5424d9412c867365",
        "type": "ui_chart",
        "z": "24bcb24c3775858e",
        "name": "Temperature graph",
        "group": "fb1b03b9c0ea0a75",
        "order": 5,
        "width": 0,
        "height": 0,
        "label": "Temperature",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "50",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1370,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "5533ac7519532ea9",
        "type": "function",
        "z": "24bcb24c3775858e",
        "name": "Prepare temp graph data",
        "func": "const data = [msg.payload.map(({date, temperature: y}) => ({y, x: Date.parse(date)}))];\nreturn {\n    payload: [{\n        data,\n        series: [\"Temperature\"],\n        labels: [\"Temp\"]\n    }]\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 360,
        "wires": [
            [
                "5424d9412c867365"
            ]
        ]
    },
    {
        "id": "c310ab6f2495195b",
        "type": "sqlite",
        "z": "24bcb24c3775858e",
        "mydb": "c628f8e8d8157672",
        "sqlquery": "fixed",
        "sql": "SELECT humidity, temperature, date FROM (\n    SELECT * FROM data ORDER BY date DESC LIMIT 30\n)\nORDER BY date\n",
        "name": "Get last 30 measured data",
        "x": 740,
        "y": 360,
        "wires": [
            [
                "5533ac7519532ea9",
                "645ceca0c1152583"
            ]
        ]
    },
    {
        "id": "645ceca0c1152583",
        "type": "function",
        "z": "24bcb24c3775858e",
        "name": "Prepare humidity graph data",
        "func": "const data = [msg.payload.map(({ date, humidity: y }) => ({ y, x: Date.parse(date) }))];\nreturn {\n    payload: [{ \n        data,\n        series: [\"Humidity\"],\n        labels: [\"Humidity\"]\n     }]\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 420,
        "wires": [
            [
                "2201de827a179fe3"
            ]
        ]
    },
    {
        "id": "2201de827a179fe3",
        "type": "ui_chart",
        "z": "24bcb24c3775858e",
        "name": "Humidity graph",
        "group": "fb1b03b9c0ea0a75",
        "order": 5,
        "width": 0,
        "height": 0,
        "label": "Humidity",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "50",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1360,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "ec4b7b6f70a227dc",
        "type": "ui_text",
        "z": "24bcb24c3775858e",
        "group": "dd77e61d13dc3b19",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Last upload date",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "x": 1550,
        "y": 1060,
        "wires": []
    },
    {
        "id": "26e8d8fdf8c0da80",
        "type": "link in",
        "z": "24bcb24c3775858e",
        "name": "Aggregated data saved",
        "links": [
            "cff43049a8a4020b"
        ],
        "x": 465,
        "y": 920,
        "wires": [
            [
                "b0b2ee1ad514bb17"
            ]
        ]
    },
    {
        "id": "b0b2ee1ad514bb17",
        "type": "function",
        "z": "24bcb24c3775858e",
        "name": "NOOP data aggregated or sent",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 940,
        "wires": [
            [
                "ef66a611cf8be683",
                "dffa6e7a48b405c5",
                "f105ceb239e1df28",
                "cf5add0296f2c165"
            ]
        ]
    },
    {
        "id": "182f988593ce7fcb",
        "type": "link in",
        "z": "24bcb24c3775858e",
        "name": "Aggregated data uploaded",
        "links": [
            "17927131f29eb90f"
        ],
        "x": 465,
        "y": 980,
        "wires": [
            [
                "b0b2ee1ad514bb17"
            ]
        ]
    },
    {
        "id": "e1afe9132822bd6d",
        "type": "inject",
        "z": "24bcb24c3775858e",
        "name": "On startup and every minute",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 620,
        "wires": [
            [
                "b0b2ee1ad514bb17",
                "e8d4af1ce38befd5",
                "c310ab6f2495195b"
            ]
        ]
    },
    {
        "id": "166a106940e078b6",
        "type": "link in",
        "z": "24bcb24c3775858e",
        "name": "Raw data saved",
        "links": [
            "5cb760db6ba7ec49"
        ],
        "x": 515,
        "y": 500,
        "wires": [
            [
                "c310ab6f2495195b",
                "e8d4af1ce38befd5"
            ]
        ]
    },
    {
        "id": "cf5add0296f2c165",
        "type": "sqlite",
        "z": "24bcb24c3775858e",
        "mydb": "c628f8e8d8157672",
        "sqlquery": "fixed",
        "sql": "SELECT COUNT() count FROM data\nWHERE aggregatedAt IS NULL ",
        "name": "Get number of data pending to be uploaded",
        "x": 1010,
        "y": 780,
        "wires": [
            [
                "cec9b73249500372"
            ]
        ]
    },
    {
        "id": "cec9b73249500372",
        "type": "ui_text",
        "z": "24bcb24c3775858e",
        "group": "9845937855a560ce",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Number of raw records waiting to be aggregated",
        "format": "{{msg.payload[0].count}}",
        "layout": "row-spread",
        "className": "",
        "x": 1490,
        "y": 780,
        "wires": []
    },
    {
        "id": "95ab933718159e83",
        "type": "link in",
        "z": "24bcb24c3775858e",
        "name": "Server connection successful",
        "links": [
            "17927131f29eb90f",
            "4af8fc8ac50a68ad"
        ],
        "x": 275,
        "y": 1140,
        "wires": [
            [
                "a3c170df306d0c14",
                "1910f15db7b38408"
            ]
        ]
    },
    {
        "id": "a3c170df306d0c14",
        "type": "function",
        "z": "24bcb24c3775858e",
        "name": "Mark last attempt as successful",
        "func": "const date = new Date().toLocaleString()\nconst successful = true;\nreturn {\n    payload: {\n        successful,\n        date\n    }\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 1160,
        "wires": [
            [
                "0f59dec39e922492"
            ]
        ]
    },
    {
        "id": "2ddd6ba8e4966afb",
        "type": "link in",
        "z": "24bcb24c3775858e",
        "name": "Server connection failed",
        "links": [
            "222c52698319f176",
            "a27cd13f52e1a611"
        ],
        "x": 275,
        "y": 1200,
        "wires": [
            [
                "5b5ddd88fa4739a7"
            ]
        ]
    },
    {
        "id": "5b5ddd88fa4739a7",
        "type": "function",
        "z": "24bcb24c3775858e",
        "name": "Mark last attempt as unsuccessful",
        "func": "const date = new Date().toLocaleString()\nconst successful = false;\nreturn {\n    payload: {\n        successful,\n        date\n    }\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 1200,
        "wires": [
            [
                "0f59dec39e922492"
            ]
        ]
    },
    {
        "id": "1910f15db7b38408",
        "type": "function",
        "z": "24bcb24c3775858e",
        "name": "Mark last attempt as successful",
        "func": "const date = new Date().toLocaleString()\nreturn {\n    payload: {\n        date\n    }\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 1120,
        "wires": [
            [
                "e939a0446bb7b7e0"
            ]
        ]
    },
    {
        "id": "90deb728ca88dc4e",
        "type": "function",
        "z": "24bcb24c3775858e",
        "name": "Transform date",
        "func": "return {\n    payload: msg.payload[0].sentAt ? new Date(msg.payload[0].sentAt).toLocaleString() : 'Not yet'\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1340,
        "y": 1060,
        "wires": [
            [
                "736008312bdcab84",
                "ec4b7b6f70a227dc"
            ]
        ]
    },
    {
        "id": "736008312bdcab84",
        "type": "debug",
        "z": "24bcb24c3775858e",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1460,
        "y": 1180,
        "wires": []
    },
    {
        "id": "e0eda3726175cf19",
        "type": "sqlite",
        "z": "8abcfa4285a64e28",
        "mydb": "c628f8e8d8157672",
        "sqlquery": "fixed",
        "sql": "create table if not exists data\n(\n    id           integer not null\n        constraint data_pk\n            primary key autoincrement,\n    humidity     real    not null,\n    temperature  real    not null,\n    date         TIMESTAMP,\n    aggregatedAt TIMESTAMP default null\n);\n\n",
        "name": "Create data table if not exists",
        "x": 500,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "c9fec765f0aa752d",
        "type": "inject",
        "z": "8abcfa4285a64e28",
        "name": "App started",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 120,
        "wires": [
            [
                "e0eda3726175cf19",
                "c5262e6969b8ad97",
                "55b13ad2f306ef0c"
            ]
        ]
    },
    {
        "id": "c5262e6969b8ad97",
        "type": "sqlite",
        "z": "8abcfa4285a64e28",
        "mydb": "c628f8e8d8157672",
        "sqlquery": "fixed",
        "sql": "create table if not exists settings\n(\n    id    TEXT\n        constraint settings_pk\n            primary key,\n    value TEXT\n);\n\n",
        "name": "Create settings table if not exists",
        "x": 520,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "55b13ad2f306ef0c",
        "type": "sqlite",
        "z": "8abcfa4285a64e28",
        "mydb": "c628f8e8d8157672",
        "sqlquery": "fixed",
        "sql": "create table if not exists aggregated_data\n(\n    id          integer not null\n        constraint aggregated_data_pk\n            primary key autoincrement,\n    humidity    real,\n    temperature real,\n    date        TIMESTAMP,\n    sentAt      TIMESTAMP\n);",
        "name": "Create aggregated data table",
        "x": 500,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "5c0e1257bcd81b94",
        "type": "catch",
        "z": "a456f3115b876e96",
        "name": "Gateway not authed",
        "scope": [
            "417f06b5e08fac4a",
            "48042c6be9db02f0"
        ],
        "uncaught": false,
        "x": 110,
        "y": 340,
        "wires": [
            [
                "805095ea76578cfc"
            ]
        ]
    },
    {
        "id": "e7ebaf9d80abef60",
        "type": "http request",
        "z": "a456f3115b876e96",
        "name": "Register gateway",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "localhost:3000/api/trpc/station.register",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": true,
        "headers": [],
        "x": 830,
        "y": 340,
        "wires": [
            [
                "81c267c34c603b54",
                "4af8fc8ac50a68ad"
            ]
        ]
    },
    {
        "id": "c4b636062ea0a9b0",
        "type": "inject",
        "z": "a456f3115b876e96",
        "name": "Every 30 minutes",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1800",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 120,
        "wires": [
            [
                "9e3a3facae4d9986"
            ]
        ]
    },
    {
        "id": "4026011227fd5951",
        "type": "sqlite",
        "z": "a456f3115b876e96",
        "mydb": "c628f8e8d8157672",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "Save authcode",
        "x": 1380,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "805095ea76578cfc",
        "type": "sqlite",
        "z": "a456f3115b876e96",
        "mydb": "c628f8e8d8157672",
        "sqlquery": "fixed",
        "sql": "SELECT value FROM settings WHERE id='identifier'",
        "name": "Read gateway info",
        "x": 350,
        "y": 340,
        "wires": [
            [
                "ea7461b748e6d25b"
            ]
        ]
    },
    {
        "id": "9e3a3facae4d9986",
        "type": "sqlite",
        "z": "a456f3115b876e96",
        "mydb": "c628f8e8d8157672",
        "sqlquery": "fixed",
        "sql": "SELECT value FROM settings WHERE id='authcode'",
        "name": "Read authcode",
        "x": 380,
        "y": 120,
        "wires": [
            [
                "48042c6be9db02f0"
            ]
        ]
    },
    {
        "id": "48042c6be9db02f0",
        "type": "function",
        "z": "a456f3115b876e96",
        "name": "Extract value",
        "func": "msg = {token: msg.payload[0].value};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 120,
        "wires": [
            [
                "b8de391e0098e3bc"
            ]
        ]
    },
    {
        "id": "ea7461b748e6d25b",
        "type": "function",
        "z": "a456f3115b876e96",
        "name": "Prepare register values",
        "func": "const identifier = msg.payload[0].value;\nmsg = {payload: {json: {identifier}}}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 340,
        "wires": [
            [
                "e7ebaf9d80abef60"
            ]
        ]
    },
    {
        "id": "81c267c34c603b54",
        "type": "function",
        "z": "a456f3115b876e96",
        "name": "Prepare SQL authcode insert",
        "func": "\nmsg = {\n    topic: \"INSERT INTO settings (id, value) VALUES('authcode', $auth)\",\n    payload: [msg.payload.result.data.json]\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 340,
        "wires": [
            [
                "4026011227fd5951"
            ]
        ]
    },
    {
        "id": "b8de391e0098e3bc",
        "type": "debug",
        "z": "a456f3115b876e96",
        "name": "gateway registered",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "\"Gateway already registered\"",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 120,
        "wires": []
    },
    {
        "id": "a27cd13f52e1a611",
        "type": "link out",
        "z": "a456f3115b876e96",
        "name": "Server connection failed",
        "mode": "link",
        "links": [
            "2ddd6ba8e4966afb"
        ],
        "x": 1015,
        "y": 460,
        "wires": []
    },
    {
        "id": "94b288ff5b6109b4",
        "type": "catch",
        "z": "a456f3115b876e96",
        "name": "Catch registration error",
        "scope": [
            "e7ebaf9d80abef60"
        ],
        "uncaught": false,
        "x": 830,
        "y": 440,
        "wires": [
            [
                "a27cd13f52e1a611"
            ]
        ]
    },
    {
        "id": "4af8fc8ac50a68ad",
        "type": "link out",
        "z": "a456f3115b876e96",
        "name": "Gateway registered to server",
        "mode": "link",
        "links": [
            "95ab933718159e83"
        ],
        "x": 1015,
        "y": 400,
        "wires": []
    },
    {
        "id": "ed86ef97bebd5f05",
        "type": "serial in",
        "z": "5cd67813776a9297",
        "name": "Arduino",
        "serial": "36c212ac3767eebf",
        "x": 410,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "3bb7ef235c3a8e07",
        "type": "sqlite",
        "z": "5cd67813776a9297",
        "mydb": "c628f8e8d8157672",
        "sqlquery": "msg.topic",
        "sql": "INSERT INTO data (temperature, humidity)\nVALUES (?, ?)",
        "name": "Insert data",
        "x": 1050,
        "y": 300,
        "wires": [
            [
                "f7a84e6bd0a4370c",
                "5cb760db6ba7ec49"
            ]
        ]
    },
    {
        "id": "8ff8f12f8e55538a",
        "type": "function",
        "z": "5cd67813776a9297",
        "name": "Prepare statement",
        "func": "var prev = msg\nmsg = {}\nmsg.topic = `INSERT INTO data (temperature, humidity, date) VALUES ($temp, $humid, $date)`\nmsg.payload = [prev.payload.temp, prev.payload.hum, new Date().toISOString()]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 300,
        "wires": [
            [
                "3bb7ef235c3a8e07"
            ]
        ]
    },
    {
        "id": "e7c59655dcdf1f86",
        "type": "json",
        "z": "5cd67813776a9297",
        "name": "Parse json",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 610,
        "y": 300,
        "wires": [
            [
                "8ff8f12f8e55538a"
            ]
        ]
    },
    {
        "id": "115e425a0919973d",
        "type": "inject",
        "z": "5cd67813776a9297",
        "name": "Every 10 seconds",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 360,
        "wires": [
            [
                "2229a4de2e7944da"
            ]
        ]
    },
    {
        "id": "2229a4de2e7944da",
        "type": "function",
        "z": "5cd67813776a9297",
        "name": "Generate mock data",
        "func": "const temp = (Math.random() * 60) - 30;\nconst hum = (Math.random() * 80);\nreturn {payload: JSON.stringify({temp, hum})};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 360,
        "wires": [
            [
                "e7c59655dcdf1f86"
            ]
        ]
    },
    {
        "id": "f7a84e6bd0a4370c",
        "type": "debug",
        "z": "5cd67813776a9297",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "\"inserted new data at \" & $moment()\t",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 220,
        "wires": []
    },
    {
        "id": "9313ff5e0af04abf",
        "type": "comment",
        "z": "5cd67813776a9297",
        "name": "Use arduino node instead when possible",
        "info": "When arduino is connected, \nuse the Arduino node instead of generating mock data",
        "x": 340,
        "y": 200,
        "wires": []
    },
    {
        "id": "5cb760db6ba7ec49",
        "type": "link out",
        "z": "5cd67813776a9297",
        "name": "Raw data saved",
        "mode": "link",
        "links": [
            "166a106940e078b6"
        ],
        "x": 1185,
        "y": 380,
        "wires": []
    },
    {
        "id": "14c81525869cc432",
        "type": "inject",
        "z": "1f7fe0dff64a8457",
        "name": "Every 2 minutes",
        "props": [],
        "repeat": "120",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 60,
        "wires": [
            [
                "8131780a860ec0f7"
            ]
        ]
    },
    {
        "id": "affde963e2980197",
        "type": "function",
        "z": "1f7fe0dff64a8457",
        "name": "Aggretate and prepare statement",
        "func": "const min_date = msg.payload.map(({ date }) => date).reduce((min,  date ) => {\n    return min < date ? min : date;\n})\n\nconst length = msg.payload.length;\n\nconst sum_temp = msg.payload.reduce((acc, d) => acc + d.temperature, 0);\nconst avg_temp = sum_temp/ length;\n\nconst sum_hum = msg.payload.reduce((acc, d) => acc + d.humidity, 0);\nconst avg_hum = sum_hum / length;\n\nreturn {\n    topic: 'INSERT INTO aggregated_data (humidity, temperature, date) VALUES ($hum, $temp, $date)', \n    payload: [avg_hum, avg_temp, min_date],\n    data_ids: msg.payload.map(({id}) => id)\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 300,
        "wires": [
            [
                "4e56a7c5ba6fbca8"
            ]
        ]
    },
    {
        "id": "8131780a860ec0f7",
        "type": "sqlite",
        "z": "1f7fe0dff64a8457",
        "mydb": "c628f8e8d8157672",
        "sqlquery": "fixed",
        "sql": "SELECT *\nFROM data\nWHERE aggregatedAt IS NULL\n  AND (unixepoch('now') - unixepoch(date)) >= 120\n  AND\n              (unixepoch(date) - (SELECT unixepoch(MIN(date))\n                                  FROM data\n                                  WHERE aggregatedAt IS NULL)\n                  )  <= 120;",
        "name": "Fetch 2 minutes of data since first not aggregated data, only want",
        "x": 580,
        "y": 60,
        "wires": [
            [
                "31e7efd9b45a34eb"
            ]
        ]
    },
    {
        "id": "31e7efd9b45a34eb",
        "type": "switch",
        "z": "1f7fe0dff64a8457",
        "name": "Take if not empty",
        "property": "$count(payload)",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 150,
        "y": 260,
        "wires": [
            [
                "d523750caf0f2c9e"
            ],
            [
                "affde963e2980197"
            ]
        ]
    },
    {
        "id": "d523750caf0f2c9e",
        "type": "debug",
        "z": "1f7fe0dff64a8457",
        "name": "Debug no data",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "\"ignoring empty data\"",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 420,
        "y": 240,
        "wires": []
    },
    {
        "id": "4e56a7c5ba6fbca8",
        "type": "sqlite",
        "z": "1f7fe0dff64a8457",
        "mydb": "c628f8e8d8157672",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "Save aggregated data",
        "x": 860,
        "y": 300,
        "wires": [
            [
                "26cac60adb2ce17c"
            ]
        ]
    },
    {
        "id": "e07acc2fa9a81b65",
        "type": "sqlite",
        "z": "1f7fe0dff64a8457",
        "mydb": "c628f8e8d8157672",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "Mark data as aggregated",
        "x": 850,
        "y": 380,
        "wires": [
            [
                "cff43049a8a4020b"
            ]
        ]
    },
    {
        "id": "26cac60adb2ce17c",
        "type": "function",
        "z": "1f7fe0dff64a8457",
        "name": "Prepare query for marking data as aggregated",
        "func": "let topic = \"UPDATE data SET aggregatedAt = datetime() WHERE id in \"\ntopic += \"(\" + msg.data_ids.map((_, i) => \"$id\" + i).join(\",\") +  \")\"\nreturn {\n    topic,\n    payload: msg.data_ids\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 380,
        "wires": [
            [
                "e07acc2fa9a81b65"
            ]
        ]
    },
    {
        "id": "cff43049a8a4020b",
        "type": "link out",
        "z": "1f7fe0dff64a8457",
        "name": "Data aggregated",
        "mode": "link",
        "links": [
            "26e8d8fdf8c0da80"
        ],
        "x": 1085,
        "y": 400,
        "wires": []
    },
    {
        "id": "1b96ac2df139d54c",
        "type": "sqlite",
        "z": "e01a8318facb448e",
        "mydb": "c628f8e8d8157672",
        "sqlquery": "fixed",
        "sql": "SELECT * FROM aggregated_data WHERE sentAt is NULL ORDER BY date LIMIT 100",
        "name": "Read aggregated data (max 100)",
        "x": 360,
        "y": 180,
        "wires": [
            [
                "1b3df56e02ae00f5"
            ]
        ]
    },
    {
        "id": "e820de3e4f6f9668",
        "type": "debug",
        "z": "e01a8318facb448e",
        "name": "Debug no data",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "\"ignoring empty data\"",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 180,
        "wires": []
    },
    {
        "id": "1b3df56e02ae00f5",
        "type": "switch",
        "z": "e01a8318facb448e",
        "name": "Take if not empty",
        "property": "$count(payload)",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 670,
        "y": 180,
        "wires": [
            [
                "e820de3e4f6f9668"
            ],
            [
                "918adb3cfcc7a145"
            ]
        ]
    },
    {
        "id": "33346f24098cc5e7",
        "type": "function",
        "z": "e01a8318facb448e",
        "name": "Prepare request body",
        "func": "\nconst message = {\n    payload:{\n    json: {\n        token: msg.payload[0].value,\n        data: msg.data\n    },\n    },\n    data_ids: msg.data.map(({ id }) => id)\n};\nreturn message;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 380,
        "wires": [
            [
                "adcad3466c8f421b"
            ]
        ]
    },
    {
        "id": "8f6737b052d96c69",
        "type": "inject",
        "z": "e01a8318facb448e",
        "name": "Every 30s",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "30",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 90,
        "y": 180,
        "wires": [
            [
                "1b96ac2df139d54c"
            ]
        ]
    },
    {
        "id": "adcad3466c8f421b",
        "type": "http request",
        "z": "e01a8318facb448e",
        "name": "Send data",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "localhost:3000/api/trpc/station.uploadData",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": true,
        "headers": [],
        "x": 750,
        "y": 380,
        "wires": [
            [
                "2a2e3761707d83f4",
                "beabf815669de0af"
            ]
        ]
    },
    {
        "id": "cc10b69c3f96ec46",
        "type": "sqlite",
        "z": "e01a8318facb448e",
        "mydb": "c628f8e8d8157672",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "Mark data as sent",
        "x": 770,
        "y": 480,
        "wires": [
            [
                "17927131f29eb90f"
            ]
        ]
    },
    {
        "id": "e219bd3555195adb",
        "type": "sqlite",
        "z": "e01a8318facb448e",
        "mydb": "c628f8e8d8157672",
        "sqlquery": "fixed",
        "sql": "SELECT value FROM settings WHERE id='authcode'",
        "name": "Read authcode",
        "x": 760,
        "y": 300,
        "wires": [
            [
                "33346f24098cc5e7"
            ]
        ]
    },
    {
        "id": "2a2e3761707d83f4",
        "type": "function",
        "z": "e01a8318facb448e",
        "name": "Prepare update query",
        "func": "const topic = \"UPDATE aggregated_data SET sentAt=datetime() WHERE id IN (\" + msg.data_ids.map((_, i) => \"$id\" +i).join(\",\") + \")\"\nreturn {\n    topic,\n    payload: msg.data_ids\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 480,
        "wires": [
            [
                "cc10b69c3f96ec46"
            ]
        ]
    },
    {
        "id": "918adb3cfcc7a145",
        "type": "function",
        "z": "e01a8318facb448e",
        "name": "Rename data",
        "func": "\nreturn {\n    data: msg.payload\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 300,
        "wires": [
            [
                "e219bd3555195adb"
            ]
        ]
    },
    {
        "id": "17927131f29eb90f",
        "type": "link out",
        "z": "e01a8318facb448e",
        "name": "Data uploaded to server successfuly",
        "mode": "link",
        "links": [
            "95ab933718159e83",
            "182f988593ce7fcb"
        ],
        "x": 1005,
        "y": 480,
        "wires": []
    },
    {
        "id": "7a4eef0507a87b27",
        "type": "catch",
        "z": "e01a8318facb448e",
        "name": "Request failed",
        "scope": [
            "adcad3466c8f421b"
        ],
        "uncaught": false,
        "x": 410,
        "y": 560,
        "wires": [
            [
                "0dd37163377d4828",
                "222c52698319f176"
            ]
        ]
    },
    {
        "id": "0dd37163377d4828",
        "type": "debug",
        "z": "e01a8318facb448e",
        "name": "Debug request failed",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 560,
        "wires": []
    },
    {
        "id": "222c52698319f176",
        "type": "link out",
        "z": "e01a8318facb448e",
        "name": "Data upload failed",
        "mode": "link",
        "links": [
            "2ddd6ba8e4966afb"
        ],
        "x": 615,
        "y": 620,
        "wires": []
    },
    {
        "id": "beabf815669de0af",
        "type": "debug",
        "z": "e01a8318facb448e",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 380,
        "wires": []
    },
    {
        "id": "ba81707626e4bec4",
        "type": "inject",
        "z": "78d678c245e7c6f5",
        "name": "Every 12 hours",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "43200",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 230,
        "y": 80,
        "wires": [
            [
                "435f1d661a26e23f",
                "d59ce3f0d3daa96f"
            ]
        ]
    },
    {
        "id": "435f1d661a26e23f",
        "type": "sqlite",
        "z": "78d678c245e7c6f5",
        "mydb": "c628f8e8d8157672",
        "sqlquery": "fixed",
        "sql": "DELETE FROM data WHERE aggregatedAt IS NOT NULL AND  unixepoch('now') - unixepoch(aggregatedAt) > (60*60*24)",
        "name": "Remove data aggregated at least 1 day ago",
        "x": 570,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "d59ce3f0d3daa96f",
        "type": "sqlite",
        "z": "78d678c245e7c6f5",
        "mydb": "c628f8e8d8157672",
        "sqlquery": "fixed",
        "sql": "DELETE FROM aggregated_data WHERE sentAt IS NOT NULL AND unixepoch('now') - unixepoch(sentAt) >= (60*60*24*3)",
        "name": "Remove Aggregated data sent at least 3 days ago",
        "x": 590,
        "y": 160,
        "wires": [
            []
        ]
    }
]